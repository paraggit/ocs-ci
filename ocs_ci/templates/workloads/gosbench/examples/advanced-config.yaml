# Advanced GOSBench Configuration Examples
# This file shows all the customization options available with the Jinja templates

# Example 1: High-Performance Configuration
high_performance_config:
  # Basic settings
  workload_name: "high-perf-gosbench"
  version: "v1.2.3"

  # Custom labels and annotations
  custom_labels:
    environment: "performance-testing"
    team: "storage-qe"
    test-type: "throughput"

  annotations:
    description: "High-performance S3 throughput testing"
    contact: "storage-team@example.com"

  # Server configuration
  server_replicas: 1
  server_memory_request: "1Gi"
  server_memory_limit: "2Gi"
  server_cpu_request: "500m"
  server_cpu_limit: "2000m"
  server_ephemeral_storage_request: "1Gi"
  server_ephemeral_storage_limit: "2Gi"

  # Worker configuration
  replicas: 20  # High number of workers for throughput
  worker_memory_request: "512Mi"
  worker_memory_limit: "1Gi"
  worker_cpu_request: "200m"
  worker_cpu_limit: "1000m"
  worker_ephemeral_storage_request: "500Mi"
  worker_ephemeral_storage_limit: "1Gi"

  # Node placement
  node_selector:
    node-type: "performance"
    storage-tier: "nvme"

  # Tolerations for dedicated nodes
  tolerations:
    - key: "performance-testing"
      operator: "Equal"
      value: "true"
      effect: "NoSchedule"

  # Anti-affinity to spread workers across nodes
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: "component"
                  operator: In
                  values: ["gosbench-worker"]
            topologyKey: "kubernetes.io/hostname"

  # Health checks
  health_checks:
    liveness:
      httpGet:
        path: /health
        port: 2112
      initialDelaySeconds: 30
      periodSeconds: 10
    readiness:
      httpGet:
        path: /ready
        port: 2112
      initialDelaySeconds: 5
      periodSeconds: 5
    startup:
      httpGet:
        path: /startup
        port: 2112
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 30

# Example 2: Security-Hardened Configuration
security_hardened_config:
  workload_name: "secure-gosbench"

  # Security context for pods
  security_context:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    seccompProfile:
      type: RuntimeDefault

  # Container security context
  container_security_context:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL

  # Service account
  service_account: "gosbench-secure-sa"

  # Image pull policy
  image_pull_policy: "Always"

  # Image pull secrets
  image_pull_secrets:
    - "registry-credentials"

  # DNS configuration
  dns_policy: "ClusterFirst"
  dns_config:
    options:
      - name: ndots
        value: "2"
      - name: edns0

# Example 3: Multi-Zone Deployment
multi_zone_config:
  workload_name: "multi-zone-gosbench"
  replicas: 15  # 5 workers per zone

  # Spread across availability zones
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: "component"
                operator: In
                values: ["gosbench-worker"]
          topologyKey: "topology.kubernetes.io/zone"

  # Tolerate zone-specific taints
  tolerations:
    - key: "zone"
      operator: "Exists"
      effect: "NoSchedule"

# Example 4: Development/Debug Configuration
debug_config:
  workload_name: "debug-gosbench"

  # Debug image with additional tools
  image: "ghcr.io/mulbc/gosbench:debug"
  image_pull_policy: "Always"

  # Extra environment variables for debugging
  extra_env_vars:
    - name: "LOG_LEVEL"
      value: "debug"
    - name: "ENABLE_PROFILING"
      value: "true"
    - name: "DEBUG_PORT"
      value: "8080"

  # Extra ports for debugging
  extra_ports:
    - containerPort: 8080
      name: debug
      protocol: TCP
    - containerPort: 6060
      name: pprof
      protocol: TCP

  # Extra arguments for debugging
  server_extra_args:
    - "--debug"
    - "--profile"

  worker_extra_args:
    - "--verbose"
    - "--debug-worker"

  # Service configuration for external access
  service_type: "NodePort"
  control_node_port: 32000
  metrics_node_port: 32112

  extra_service_ports:
    - name: debug
      port: 8080
      nodePort: 32080

# Example 5: Custom Storage Configuration
custom_storage_config:
  workload_name: "storage-gosbench"

  # Extra volumes for custom storage
  extra_volumes:
    - name: "cache-volume"
      spec:
        emptyDir:
          sizeLimit: "10Gi"
    - name: "config-volume"
      spec:
        configMap:
          name: "custom-gosbench-config"
    - name: "secret-volume"
      spec:
        secret:
          secretName: "custom-credentials"

  # Extra volume mounts
  extra_volume_mounts:
    - name: "cache-volume"
      mountPath: "/tmp/cache"
    - name: "config-volume"
      mountPath: "/etc/gosbench"
      readOnly: true
    - name: "secret-volume"
      mountPath: "/etc/secrets"
      readOnly: true

# Example 6: Load Balancer Service Configuration
load_balancer_config:
  workload_name: "lb-gosbench"

  # Service configuration
  service_type: "LoadBalancer"
  load_balancer_ip: "10.0.0.100"
  load_balancer_source_ranges:
    - "10.0.0.0/8"
    - "172.16.0.0/12"

  external_traffic_policy: "Local"
  session_affinity: "ClientIP"
  session_affinity_config:
    clientIP:
      timeoutSeconds: 3600

# Example 7: Resource-Constrained Environment
resource_constrained_config:
  workload_name: "minimal-gosbench"

  # Minimal resources
  server_memory_request: "64Mi"
  server_memory_limit: "128Mi"
  server_cpu_request: "50m"
  server_cpu_limit: "100m"

  worker_memory_request: "32Mi"
  worker_memory_limit: "64Mi"
  worker_cpu_request: "25m"
  worker_cpu_limit: "50m"

  # Fewer replicas
  replicas: 2

  # Deployment strategy for minimal disruption
  deployment_strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
